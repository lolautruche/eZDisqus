<?php
namespace BDunogier\EzDisqusBundle\FieldType\DisqusComments;

use eZ\Publish\Core\FieldType\FieldType;

class Type extends FieldType
{
    /**
     * Return the field type identifier for this field type
     *
     * This identifier should be globally unique and the implementer of a
     * FieldType must take care for the uniqueness. It is therefore recommended
     * to prefix the field-type identifier by a unique string that identifies
     * the implementer. A good identifier could for example take your companies main
     * domain name as a prefix in reverse order.
     *
     * @return string
     */
    public function getFieldTypeIdentifier()
    {
        // TODO: Implement getFieldTypeIdentifier() method.
    }

    /**
     * Converts the given $value into a plain hash format
     *
     * Converts the given $value into a plain hash format, which can be used to
     * transfer the value through plain text formats, e.g. XML, which do not
     * support complex structures like objects. See the class level doc block
     * for additional information. See the class description for more details on a hash format.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    public function toHash( $value )
    {
        // TODO: Implement toHash() method.
    }

    /**
     * Implements the core of {@see acceptValue()}.
     *
     * @param mixed $inputValue
     *
     * @return \eZ\Publish\Core\FieldType\Value The potentially converted and structurally plausible value.
     */
    protected function internalAcceptValue( $inputValue )
    {
        // TODO: Implement internalAcceptValue() method.
    }

    /**
     * Returns a human readable string representation from the given $value
     *
     * It will be used to generate content name and url alias if current field
     * is designated to be used in the content name/urlAlias pattern.
     *
     * The used $value can be assumed to be already accepted by {@link
     * acceptValue()}.
     *
     * @param mixed $value
     * @return string
     */
    public function getName( $value )
    {
        // TODO: Implement getName() method.
    }

    /**
     * Returns the empty value for this field type.
     *
     * This value will be used, if no value was provided for a field of this
     * type and no default value was specified in the field definition. It is
     * also used to determine that a user intentionally (or unintentionally) did not
     * set a non-empty value.
     *
     * @return mixed
     */
    public function getEmptyValue()
    {
        // TODO: Implement getEmptyValue() method.
    }

    /**
     * Converts an $hash to the Value defined by the field type
     *
     * This is the reverse operation to {@link toHash()}. At least the hash
     * format generated by {@link toHash()} must be converted in reverse.
     * Additional formats might be supported in the rare case that this is
     * necessary. See the class description for more details on a hash format.
     *
     * @param mixed $hash
     * @return mixed
     */
    public function fromHash( $hash )
    {
        // TODO: Implement fromHash() method.
    }
}
